# read more here http://lollyrock.com/articles/content-security-policy/

# Copied and changed from https://gist.github.com/plentz/6737338

# don't send the nginx version number in error pages and Server header
server_tokens off;

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
# add_header Content-Security-Policy
#     "default-src 'self';
#     connect-src 'self' http://$http_host https://$http_host ws://$http_host wss://$http_host;
#     script-src 'self' 'unsafe-eval' 'unsafe-inline' https://ajax.googleapis.com https://fonts.googleapis.com http://ajax.googleapis.com http://fonts.googleapis.com;
#     img-src 'self' http://*.osm.org https://*.openstreetmap.org https://yesno.wtf data:;
#     style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com http://unpkg.com http://fonts.googleapis.com;
#     font-src 'self' https://fonts.gstatic.com https://unpkg.com https://fonts.googleapis.com http://fonts.gstatic.com http://unpkg.com http://fonts.googleapis.com data:;
#     frame-src;
#     child-src;
#     object-src 'none'";

proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $server_name;

server {
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    listen 80;
    access_log /var/log/nginx/access.log;
    return 503;
}

upstream backend {
    server backend:5000;
}

upstream frontend {
    server frontend:8080;
}

server {
    listen 80;
    server_name ${DOMAIN_NAMES};

    location = /favicon.ico { access_log off; log_not_found off; }

    location /api/static/ {
        alias /var/www/backend/static/;
    }

    location /api/media/ {
        alias /var/www/backend/media/;
    }

    location /api {
        proxy_pass http://backend;
        proxy_pass_request_headers on;
    }

    location /docs {
        proxy_pass http://backend;
        proxy_pass_request_headers on;
    }

    location /admin {
        proxy_pass http://backend;
        proxy_pass_request_headers on;
    }

    location / {
        proxy_pass http://frontend;
        proxy_pass_request_headers on;
    }
}
